
module.exports = function(AllLoansAndBalconOffers) {

/**
 * API to get all offers available for Loans and Balance Segments
 * @param {string} Accept_Language  List of acceptable human languages for response in ISO format
 * @param {string} uuid A 128 bit universally unique identifier (UUID) that you generate for every request and is used for tracking. It is recommended to use the output from Java UUID class or an equivalent
 * @param {string} citiUuid Unique UUID generated by APIM for every request
 * @param {string} sid User session id
 * @param {string} Accept Content types that are acceptable for the response. Currently we support application/json
 * @param {string} Content_Type This is the HTTP Content-Type, it is present only for PUT/POST methods
 * @param {string} channelId Channel ID used by the user
 * @param {string} businessCode  3 character business code
 * @param {string} countryCode Country code in 2 character ISO 3166 format
 * @param {string} hostConnect AgentId, Agent access level (Only populated for IBS Assisted Channel), IBS Region, Customer Region; all values pipe delimited
 * @param {CreditCardOfferRequest} CreditCardOfferRequest Retrive all the available Loans and Offers request
 * @callback {Function} callback Callback function
 * @param {Error|string} err Error object
 * @param {CreditCardOfferResponse} result Result object
 */
AllLoansAndBalconOffers.getAllLoansAndBalconOffers = function(Accept_Language, uuid, citiUuid, sid, Accept, Content_Type, channelId, businessCode, countryCode, hostConnect, CreditCardOfferRequest, callback) {

  // Replace the code below with your implementation.
  // Please make sure the callback is invoked.
  process.nextTick(function() {
    var err = new Error('Not implemented');
    callback(err);
  });
  
  /*
  var err0 = new Error('<table><tr><td>Type</td><td>Code</td><td>Details</td><td>More Info</td></tr><tr> <td> error </td><td>invalidRequest</td> <td> Missing or invalid Parameters </td></tr> </table>');
  err0.statusCode = 400;
  return cb(err0);
  */ 
  /*
  var err1 = new Error('<table><tr><td>Type</td><td>Code</td><td>Details</td><td>More Info</td></tr><tr><td>error</td><td>accessNotConfigured</td><td>The request operation is not configured to access this resource</td><td>Channel/Country/Business provided in the request is not supported currently</td></tr></table>');
  err1.statusCode = 403;
  return cb(err1);
  */ 
  /*
  var err2 = new Error('<table><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>error</td><td>resourceNotFound</td><td>The requested resource was not found</td></tr></table>');
  err2.statusCode = 404;
  return cb(err2);
  */ 
  /*
  var err3 = new Error('<table><tr><td>Type</td><td>Code</td><td>Details</td></tr><tr><td>fatal</td><td>serverUnavailable</td><td>The request failed due to an internal error/server unavailability</td></tr></table>');
  err3.statusCode = 500;
  return cb(err3);
  */ 
}




AllLoansAndBalconOffers.remoteMethod('getAllLoansAndBalconOffers',
  {
  isStatic: true,
  consumes: [ 'application/json' ],
  produces: [ 'application/json' ],
  accepts: [
    {
      arg: 'Accept-Language',
      type: 'string',
      description: ' List of acceptable human languages for response in ISO format',
      required: false,
      http: { source: 'header' }
    },
    {
      arg: 'uuid',
      type: 'string',
      description: 'A 128 bit universally unique identifier (UUID) that you generate for every request and is used for tracking. It is recommended to use the output from Java UUID class or an equivalent',
      required: true,
      http: { source: 'header' }
    },
    {
      arg: 'citiUuid',
      type: 'string',
      description: 'Unique UUID generated by APIM for every request',
      required: true,
      http: { source: 'header' }
    },
    {
      arg: 'sid',
      type: 'string',
      description: 'User session id',
      required: true,
      http: { source: 'header' }
    },
    {
      arg: 'Accept',
      type: 'string',
      description: 'Content types that are acceptable for the response. Currently we support application/json',
      required: true,
      http: { source: 'header' }
    },
    {
      arg: 'Content-Type',
      type: 'string',
      description: 'This is the HTTP Content-Type, it is present only for PUT/POST methods',
      required: true,
      http: { source: 'header' }
    },
    {
      arg: 'channelId',
      type: 'string',
      description: 'Channel ID used by the user',
      required: true,
      http: { source: 'header' }
    },
    {
      arg: 'businessCode',
      type: 'string',
      description: ' 3 character business code',
      required: true,
      http: { source: 'header' }
    },
    {
      arg: 'countryCode',
      type: 'string',
      description: 'Country code in 2 character ISO 3166 format',
      required: true,
      http: { source: 'header' }
    },
    {
      arg: 'hostConnect',
      type: 'string',
      description: 'AgentId, Agent access level (Only populated for IBS Assisted Channel), IBS Region, Customer Region; all values pipe delimited',
      required: false,
      http: { source: 'header' }
    },
    {
      arg: 'CreditCardOfferRequest',
      type: 'CreditCardOfferRequest',
      description: 'Retrive all the available Loans and Offers request',
      required: true,
      http: { source: 'body' }
    }
  ],
  returns: [
    {
      description: 'Successful operation.',
      type: 'CreditCardOfferResponse',
      arg: 'data',
      root: true
    }
  ],
  http: {
    verb: 'post',
    path: '/crud/v1/na/creditCards/accounts/balanceTransfer/offerAndBalanceSegments/retrieve'
  },
  description: 'API to get all offers available for Loans and Balance Segments'
}
);

}
